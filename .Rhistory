·
·
·
·
·
9
Debugging Tools in R
The primary tools for debugging functions in R are
These are interactive tools specifically designed to allow you to pick through a function. There’s also
the more blunt technique of inserting print/cat statements in the function.
traceback: prints out the function call stack after an error occurs; does nothing if there’s no error
debug: flags a function for “debug” mode which allows you to step through execution of a function
one line at a time
browser: suspends the execution of a function wherever it is called and puts the function in
debug mode
trace: allows you to insert debugging code into a function a specific places
recover: allows you to modify the error behavior so that you can browse the function call stack
·
·
·
·
·
9
mean(x)
mean(qq)
traceback()
debug(lm)
lm(y ~ x)
x
exit
exit()
head(iris)
?iris
exit()
quit()
library(datasets)
data(iris)
?iris
head(iris)
colMeans(iris)
?colMeans
str(iris)
colMeans(iris$Sepal.Width)
mean(iris$Sepal.Width)
apply(iris, 2, mean)
apply(iris$Sepal.Width, 2, mean)
iris.num <- iris[,c(1:4)]
colMeans(iris.num)
data(mtcars)
head(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
?iris
head(iris)
mean(iris$sepal.Length)
mean(iris$Sepal.Length)
apply(iris[, 1:4], 2, mean)
?with
with(mtcars, tapply(mpg, cyl, mean))
tapply(iris$Sepal.Length, iris$Species, mean)
?numeric
x <- numeric()
x
m <- NULL
m
set <- function(y) {
x <<- y
m <<- NULL
}
set
m <- 5
set(10)
get()
get(x)
get(6)
get
get 10
?clr
??clear
?delete
??delete
?rm
rm(m,x,set)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
quit()
cachemean
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
x
y
rm(x)
rm(y)
cachemean(c(1,2,3,5,9))
makevector(c(1,2,3,5,9))
makeVector(c(1,2,3,5,9))
get
get()
get(x)
makeVector()
cachemean()
cachemean(c(1,2,3,5,9))
makeVector()
m
x
cachemean
makeVector
makeVector(x=c(1,2,3,4))
x
makeVector$set(c(1,2,3,4))
ls(environment(makeVector))
ls(environment(cachemean))
state <- makeVector()
state
state$set(c(1,2,3,4))
state$get()
cachemean(state)
cachemean(state)
box <- matrix(c(5,7,-1,8), nrow = 2, ncol = 2)
solve(box)
makeCacheMatrix <- function(x = matrix()) {
mInv <- NULL
set <- function(y) {
x <<- y
mInv <<- NULL
}
get <- function() x
setInv <- function(mean) mInv <<- solve
getInv <- function() mInv
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
mstate <- makeCacheMatrix()
rm(makeCacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
mInv <- NULL
set <- function(y) {
x <<- y
mInv <<- NULL
}
get <- function() x
setInv <- function(mean) mInv <<- solve
getInv <- function() mInv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
mstate <- makeCacheMatrix()
state$set(box)
solve(box)
mstate$get()
mstate$set(box)
mstate$get()
box
mstate$get()
solve(box)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mInv <- x$getInv()
if(!is.null(mInv)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(m)
m
}
}
rm(cacheSolve)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mInv <- x$getInv()
if(!is.null(mInv)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(m)
m
}
rm(cacheSolve)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mInv <- x$getInv()
if(!is.null(mInv)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(m)
m
}
mstate
cacheSolve(mstate)
solve(box)
?gl
gl(2, 8, labels = c("Control", "Treat"))
gl(2,1,20)
gl(2,4,20)
gl(2,4,20,c("tick", "tack"))
dnorm(0) == 1/sqrt(2*pi)
dnorm(1) == exp(-1/2)/sqrt(2*pi)
dnorm(1) == 1/sqrt(2*pi*exp(1))
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + 3
summary(y)
plot(x,y)
summary(x)
summary(e)
e <- rnorm(100,0,2)
summary(e)
y <- 0.5 + 2 * x + 3
summary(y)
summary(e)
summary(x)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <-  0.5 + 2 * x + e
summary(x)
e
summary(e)
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
y
plot(x,y)
set.seed(1)
rpois(5,2)
set.seed(1)
rpois(5,2)
?rbinom
quit()
args("rnorm")
?rnorm
rnorm
args("rnorm")
?rnorm
rnorm
find.package("devtools")
install.packages("devtools")
find.package("devtools")
search()
?search
searchpaths()
library(devtools)
q()
find.package("devtools")
library(devtools)
find_rtools()
q()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
q()
library(datasets)
with(airquality, plot(Wind, Ozone))
hist(airquality$Ozone)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
?airquality
head(airquality)
?boxplot
par("lty")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in NYC")
example(points)
x <= rnorm(100)
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
g
?gl
g <- gl(2, 50, labels = c("Male", "Female"))
g
plot(x,y)
plot(x,y, type = "n")
points(x[g == "Male"], y[g == "Male"]), col = "green")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "blue")
q()
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
head(dataMatrix)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
head(t(dataMatrix)
)
heatmap(dataMatrix)
rep(c(0, 3), each = 5)
t(dataMatrix)[, nrow(dataMatrix):1]
hh <- hclust(dist(dataMatrix))
?hh
hh
hclust$height
hclust$order
hh$height
hh$labels
hh$dist.method
rect.hclust(hh)
print(hh)
plot(hh)
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
dataMatrixOrdered <- dataMatrix[hh$order, ]
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1]
image(dataMatrixOrdered)
image(t(dataMatrixOrdered))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
head(t(dataMatrixOrdered))
head(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
svd1 <- svd(scale(dataMatrixOrdered))
plot(svd1$u[, 1], 40:1, , xlab = "Row", ylab = "First left singular vector",
pch = 19)
plot(svd1$u[, 1], xlab = "Row", ylab = "First left singular vector",
pch = 19)
?svd1$u
?svd1
head(svd1$u)
svd1$u[,1]
constantMatrix <- dataMatrixOrdered*0
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0,1),each=5)}
)
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0,1),each=5)}
View(constantMatrix)
svd1 <- svd(constantMatrix)
View(constantMatrix)
par(mfrow=c(1,3))
image(t(constantMatrix)[,nrow(constantMatrix):1])
image(constantMatrix)
tconst <- t(constantMatrix)[,nrow(constantMatrix):1]
View(tconst)
View(constantMatrix)
View(t(constantMatrix))
svd1$d^2/sum(svd1$d^2)
exit()
q()
?cachemean
??cachemean
rm(cachemean)
rm(makeVector)
q()
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
package(data.table)
use(data.table)
library(data.table)
flights <- fread("https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv")
head(flights)
ans <- flights[origin == "JFK" & month == 6L]
head(ans)
ans <- flights[origin == "JFK" & month == 6]
head(ans)
step1 <- flights[,(arr_delay + dep_delay) < 0]
head step1
head(step1)
?sum
sum(head(step1)
)
sum(head(step1),100)
sum(head(step1,100))
?.N
??.N
?EDT
DT = data.table(ID = c("b","b","b","a","a","c"), a = 1:6, b = 7:12, c=13:18)
DT
DT[, print(.SD), by=ID]
DT[, .SD, by=ID]
wd <- getwd()
print(wd)
wd
example(data.table)
rm()
?rm
rm(list ls())
rm(list = ls())
example(data.table)
rm(list ls())
rm(list = ls())
myapp <- oauth_app("github", "31d4d8d0f6a0183feb95", "859da596b51be4c115b490ad918a02b855d8e57b")
library(httr)
myapp <- oauth_app("github", "31d4d8d0f6a0183feb95", "859da596b51be4c115b490ad918a02b855d8e57b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
rm(list = ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "31d4d8d0f6a0183feb95", "859da596b51be4c115b490ad918a02b855d8e57b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "31d4d8d0f6a0183feb95", "859da596b51be4c115b490ad918a02b855d8e57b")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
q()
library(swirl)
swirl()
swirl()
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
/select
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 | r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
q()
setwd("~/Admin/Training/Coursera/Getting and Cleaning Data/Course Project/UCI HAR Dataset")
library(dplyr)
version()
R.Version()
x.train <- read.table("train/X_train.txt")
names <- read.table("features.txt")
x.train <- read.table("train/X_train.txt", col.names=names)
x.train <- read.table("train/X_train.txt", col.names=names$V2)
x.trainD <- tbl_df(x.train)
x.test <- read.table("test/X_train.txt", col.names=names$V2)
x.test <- read.table("test/X_test.txt", col.names=names$V2)
x.testD <- tbl_df(x.test)
